worker_processes auto;

events { worker_connections 1024; }

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  # Extra MIME types Flutter web needs
  types {
    application/javascript  mjs;
    application/wasm        wasm;
    font/otf                otf;
    font/ttf                ttf;
    image/webp              webp;
  }

  sendfile on;
  tcp_nopush on;
  keepalive_timeout 65;

  gzip on;
  gzip_types text/plain text/css application/json application/javascript application/wasm text/xml application/xml image/svg+xml;

  # Helpful logging while you verify
  error_log  /var/log/nginx/error.log  debug;
  access_log /var/log/nginx/access.log;

  # Strip query string from the raw request URI (keeps % escapes intact)
  # Example: "/assets/.../Font%2520Awesome.otf?v=1" -> "/assets/.../Font%2520Awesome.otf"
  map $request_uri $raw_no_args {
    ~^([^?]+) $1;
  }

  server {
    # DO App Platform uses port 8080 inside containers
    listen 8080;
    server_name _;

    # You copy build/ -> /usr/share/nginx/html/ (keeps /assets/... tree intact)
    root  /usr/share/nginx/html;
    index index.html;

    add_header X-Content-Type-Options nosniff always;

    # --- Generic long-cache for static assets
    location ~* \.(wasm|mjs|js|css|png|jpg|jpeg|gif|ico|svg|webp|otf|ttf|woff|woff2)$ {
      add_header Cache-Control "public, max-age=31536000, immutable" always;
      expires 1y;
      try_files $uri $uri/ =404;
    }

    # --- Service workers: never cache
    location = /flutter_service_worker.js {
      add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0" always;
      try_files $uri =404;
    }
    location = /sw-offline.js {
      add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0" always;
      try_files $uri =404;
    }
    location = /assets-sw.js {
      add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0" always;
      try_files $uri =404;
    }

    # --- CRITICAL: serve files whose names literally contain `%20`
    # 1) Normalize any double-encoded spaces to single-encoded (%2520 -> %20)
    # 2) Serve using the *raw escaped* path (no decoding), so files like
    #    ".../Font%20Awesome%207%20Free-Solid-900.otf" are found on disk.
    location ^~ /assets/ {
      # Step 1: turn %2520 into %20 (repeat until none remain)
      # 'last' restarts URI processing with the updated path
      if ($raw_no_args ~ "%2520") {
        rewrite ^(/assets/.*)%2520(.*)$ $1%20$2 last;
      }

      # Step 2: try the literal on-disk path using the escaped URI (no args)
      # IMPORTANT: prepend $document_root to make try_files check the filesystem
      try_files $document_root$raw_no_args =404;

      # Cache headers for assets
      add_header Cache-Control "public, max-age=31536000, immutable" always;
      expires 1y;

      # Allow font loads across origins if needed
      add_header Access-Control-Allow-Origin "*" always;
    }

    # --- SPA fallback for deep routes
    location / {
      try_files $uri $uri/ /index.html;

      # Helpful for WASM + third-party scripts
      add_header Cross-Origin-Embedder-Policy credentialless always;
      add_header Cross-Origin-Opener-Policy  same-origin   always;
    }
  }
}
