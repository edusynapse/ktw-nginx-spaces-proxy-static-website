events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;

    # Explicit MIME for Flutter .mjs (ES module)
    types {
        application/javascript mjs;
    }

    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/wasm text/xml application/xml application/xml+rss text/javascript;

    # Logging for debug (appears in App Platform runtime logs)
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;

    server {
        listen 8080;
        server_name localhost;
        root /usr/share/nginx/html;  # Local Flutter bundle

        # Cache static assets
        location ~* \.(wasm|otf|woff|woff2|ttf)$ {
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            expires 1y;
        }

        location ~* \.(js|mjs|css|png|jpg|jpeg|gif|ico|svg)$ {
            add_header Cache-Control "public, max-age=31536000, immutable" always;
            expires 1y;
        }

        # Service workers (no-cache for updates)
        location ~* \.js$ {
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Cache-Control "max-age=0" always;
            add_header Cache-Control "no-transform" always;
        }

        # Fix double-encoding for Font Awesome fonts in assets path (%2520 → %20, internal redirect)
        location ~ ^/assets/packages/font_awesome_flutter/lib/fonts/.*%2520.*\.otf$ {
            rewrite ^(.*)%2520(.*)$ $1%20$2 break;
        }

        # Fix for top-level Font Awesome (%2520 → %20)
        location ~ ^/Font%2520Awesome.*\.otf$ {
            rewrite ^(.*)%2520(.*)$ $1%20$2 break;
        }

        # SPA fallback: Serve index.html for deep paths (/login → index.html)
        location / {
            try_files $uri $uri/ /index.html;

            # Safer COEP for WASM (credentialless avoids blocking externals like checkout.js)
            add_header Cross-Origin-Embedder-Policy credentialless always;
            add_header Cross-Origin-Opener-Policy same-origin always;
        }
    }
}