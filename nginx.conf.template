# nginx.conf.template  (uses $APP_VERSION via envsubst)

events { worker_connections 1024; }

http {
  include /etc/nginx/mime.types;

  # Add ES module mapping for .mjs on top of mime.types
  types { application/javascript mjs; }

  default_type  application/octet-stream;
  sendfile      on;
  keepalive_timeout 65;

  gzip on;
  gzip_types text/plain text/css application/json application/javascript application/wasm text/xml application/xml application/xml+rss text/javascript;

  # Logs (visible in DO runtime logs)
  error_log  /var/log/nginx/error.log debug;
  access_log /var/log/nginx/access.log;

  # ── version helpers ─────────────────────────────────────────────────────────
  map $arg_version $needs_version {
    ""      1;
    default 0;
  }
  map $args $versioned_qs {
    ""      "version=$APP_VERSION";
    default "$args&version=$APP_VERSION";
  }
  # ────────────────────────────────────────────────────────────────────────────

  ########################################################################
  # PROD: knowtowin.com  -> /usr/share/nginx/html
  ########################################################################
  server {
    listen 8080;
    server_name knowtowin.com;

    absolute_redirect off;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    root  /usr/share/nginx/html;
    index index.html;

    # Service workers: NEVER cached, NEVER redirected (no 3xx allowed)
    location = /flutter_service_worker.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }
    location = /sw-offline.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }
    location = /firebase-messaging-sw.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      add_header Service-Worker-Allowed "/" always;
      try_files $uri =404;
    }
    location = /sw-kill.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }

    # Tiny version probe used by the page to decide if it must nuke old SW/caches
    location = /__app_version {
      default_type text/plain;
      add_header Cache-Control "no-store, must-revalidate" always;
      return 200 "$APP_VERSION";
    }

    # Static assets → force ?version=... (relative 302), then cache forever
    location ~* \.(?:mjs|js|css|png|jpg|jpeg|gif|ico|svg|wasm|otf|woff2?|ttf|json)$ {
      if ($needs_version) {
        return 302 $uri?$versioned_qs;   # relative Location keeps HTTPS
      }
      add_header Cache-Control "public, max-age=31536000, immutable" always;
      expires 1y;
      try_files $uri =404;
    }

    # Font Awesome double-encoded paths → canonical file, keep ?version
    location = "/assets/packages/font_awesome_flutter/lib/fonts/Font%20Awesome%207%20Brands-Regular-400.otf" {
      if ($needs_version) { return 302 $uri?$versioned_qs; }
      rewrite ^ /Font%20Awesome%207%20Brands-Regular-400.otf?version=$arg_version break;
    }
    location = "/assets/packages/font_awesome_flutter/lib/fonts/Font%20Awesome%207%20Free-Regular-400.otf" {
      if ($needs_version) { return 302 $uri?$versioned_qs; }
      rewrite ^ /Font%20Awesome%207%20Free-Regular-400.otf?version=$arg_version break;
    }
    location = "/assets/packages/font_awesome_flutter/lib/fonts/Font%20Awesome%207%20Free-Solid-900.otf" {
      if ($needs_version) { return 302 $uri?$versioned_qs; }
      rewrite ^ /Font%20Awesome%207%20Free-Solid-900.otf?version=$arg_version break;
    }

    # SPA fallback
    location / {
      try_files $uri $uri/ /index.html;
      add_header Cross-Origin-Opener-Policy same-origin-allow-popups always;
      add_header Cross-Origin-Embedder-Policy credentialless always;
    }
  }

  ########################################################################
  # DEV: devapp.knowtowin.com  -> /usr/share/nginx/devhtml
  ########################################################################
  server {
    listen 8080;
    server_name devapp.knowtowin.com;

    absolute_redirect off;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    root  /usr/share/nginx/devhtml;
    index index.html;

    # Service workers (dev): no-store, no-redirect
    location = /flutter_service_worker.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }
    location = /sw-offline.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }
    location = /firebase-messaging-sw.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      add_header Service-Worker-Allowed "/" always;
      try_files $uri =404;
    }
    location = /sw-kill.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }

    # Tiny version probe used by the page to decide if it must nuke old SW/caches
    location = /__app_version {
      default_type text/plain;
      add_header Cache-Control "no-store, must-revalidate" always;
      return 200 "$APP_VERSION";
    }

    # Static assets → force ?version=... (relative 302), then cache forever
    location ~* \.(?:mjs|js|css|png|jpg|jpeg|gif|ico|svg|wasm|otf|woff2?|ttf|json)$ {
      if ($needs_version) {
        return 302 $uri?$versioned_qs;
      }
      add_header Cache-Control "public, max-age=31536000, immutable" always;
      expires 1y;
      try_files $uri =404;
    }

    # Font Awesome double-encoded paths
    location = "/assets/packages/font_awesome_flutter/lib/fonts/Font%20Awesome%207%20Brands-Regular-400.otf" {
      if ($needs_version) { return 302 $uri?$versioned_qs; }
      rewrite ^ /Font%20Awesome%207%20Brands-Regular-400.otf?version=$arg_version break;
    }
    location = "/assets/packages/font_awesome_flutter/lib/fonts/Font%20Awesome%207%20Free-Regular-400.otf" {
      if ($needs_version) { return 302 $uri?$versioned_qs; }
      rewrite ^ /Font%20Awesome%207%20Free-Regular-400.otf?version=$arg_version break;
    }
    location = "/assets/packages/font_awesome_flutter/lib/fonts/Font%20Awesome%207%20Free-Solid-900.otf" {
      if ($needs_version) { return 302 $uri?$versioned_qs; }
      rewrite ^ /Font%20Awesome%207%20Free-Solid-900.otf?version=$arg_version break;
    }

    # SPA fallback
    location / {
      try_files $uri $uri/ /index.html;
      add_header Cross-Origin-Opener-Policy same-origin-allow-popups always;
      add_header Cross-Origin-Embedder-Policy credentialless always;
    }
  }

  ########################################################################
  # Optional: localhost fallback inside container
  ########################################################################
  server {
    listen 8080;
    server_name localhost 127.0.0.1;

    absolute_redirect off;

    root /usr/share/nginx/html;
    index index.html;

    # Service workers (local): no-store, no-redirect
    location = /flutter_service_worker.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }
    location = /sw-offline.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }
    location = /firebase-messaging-sw.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      add_header Service-Worker-Allowed "/" always;
      try_files $uri =404;
    }
    location = /sw-kill.js {
      add_header Cache-Control "no-store, must-revalidate" always;
      expires -1;
      try_files $uri =404;
    }

    # Tiny version probe used by the page to decide if it must nuke old SW/caches
    location = /__app_version {
      default_type text/plain;
      add_header Cache-Control "no-store, must-revalidate" always;
      return 200 "$APP_VERSION";
    }

    # Static assets
    location ~* \.(?:mjs|js|css|png|jpg|jpeg|gif|ico|svg|wasm|otf|woff2?|ttf|json)$ {
      if ($needs_version) {
        return 302 $uri?$versioned_qs;
      }
      add_header Cache-Control "public, max-age=31536000, immutable" always;
      expires 1y;
      try_files $uri =404;
    }

    # SPA fallback
    location / {
      try_files $uri $uri/ /index.html;
      add_header Cross-Origin-Opener-Policy same-origin-allow-popups always;
      add_header Cross-Origin-Embedder-Policy credentialless always;
    }
  }
}
